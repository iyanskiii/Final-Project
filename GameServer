import java.io.*;
import java.net.*;
import java.util.Random;  //generate random numbers


public class GameServer<ReadFromClient, WriteToClient> {
    private ServerSocket ss;
    private int numPlayers;
    private int maxPlayers;
    private int enemies;
    private Socket enemiesSocket; 
    private ReadFromClient p1ReadRunnable;
    private WriteToClient p1WriteRunnable;
    private ReadFromClient p2ReadRunnable;
    private WriteToClient p2WriteRunnable;
    private Random random;
    private long seed;
    private double enemiesx, enemiesy;

    public GameServer(){
        System.out.println("===== GAME SERVER =====");
        numPlayers = 0;
        maxPlayers = 2;
        random = new Random();
        seed = random.nextLong(); //binibigyan ng random seed/number


        try{
            ss = new ServerSocket(45371);
        }catch(IOException ex) {
            System.out.println("IOException from GameServer constructor");
        }
    }
    public void acceptConnections(){  //encapsulate accepting connections
        try{
            System.out.println("Waiting for connections...");
            
            while(numPlayers < maxPlayers ){
                Socket s = ss.accept(); //server to begin accepting connections
                DataInputStream in = new DataInputStream(s.getInputStream());  //this allows you to read data from an input source or the network connection
                DataOutputStream out = new DataOutputStream(s.getOutputStream()); // allows you to send different types of data over a network connection 

                numPlayers++;   //incrementing players
                out.writeInt(numPlayers); //out is a data output stream. writeInt allows to send an integer to the client
                out.writeLong(seed);
                System.out.println("Player #" + numPlayers + "has connected"); 

                ReadFromClient rfc = new ReadFromClient(numPlayers, in); 
                WriteToClient wtc = new WriteToClient(numPlayers, out);

                if (numPlayers == 1){
                    p1ReadRunnable = rfc; 
                    p1WriteRunnable = wtc;
                }
                else {
                    p2ReadRunnable = rfc;
                    p2WriteRunnable = wtc;
                    p1WriteRunnable.sendStartMsg();
                    p2WriteRunnable.sendStartMsg();
                }
                };
                System.out.println("No longer accepting connections");
        }catch(IOException ex){
            System.out.println("IOException from acceptConnections()");
        }
    }
    private class ReadFromClient implements Runnable{
        private int playerId;
        private DataInputStream dataIn;
        public ReadFromClient (int pid, DataInputStream in){
            this.playerId = pid;
            this.dataIn = in;
            System.out.println("RFC" + playerId + "Runnable Created");
        }
        public void run(){
                try {
                    while (playerId == 1 || playerId == 2){
                            enemiesx = dataIn.readDouble();
                    }
                }catch(IOException ex){
                    System.out.println("IOException from RFC run()");
                }
            }
        }
    private class WriteToClient implements Runnable{
        private int playerId;   
        private DataOutputStream dataOut;
        
        public WriteToClient (int pid, DataOutputStream out){
            this.playerId = pid;
            this.dataOut = out;
            System.out.println("RFC" + playerId + "Runnable Created");
        }        
        public void run(){
                try{
                    while (playerId == 1 || playerId == 2){
                        dataOut.writeDouble(enemiesx);
                        // dataOut.writeDouble(enemiesy);
                        dataOut.flush(); //to ensure that data is immediately send over the network.
                    }try{
                        Thread.sleep(25);
                    }catch(InterruptedException ex){
                        System.out.println("InterruptedException from WTC run()");
                    }

                }catch(IOException ex){
                    System.out.println("IOException from WTC run()");
                }
            }
            public void sendStartMsg(){
                try{
                    dataOut.writeUTF("We now have 2 players. Go!");
                }catch(IOException ex){
                    System.out.println("IOException from sendStartMsg()");

                }
            }
        }       
    public static void main(String[] args){
        GameServer gs = new GameServer();
        gs.acceptConnections();
    }
}
